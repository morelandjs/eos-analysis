#!/usr/bin/env python3

"""
Reduce event-by-event observables (multiplicity, Qn vectors) to batch
quantitities (<mult>, flow cumulants) for each design point and centrality.
Creates files <IC name>_<observable>.dat.
"""

import glob
import sys
import subprocess

import numpy as np
from hic import flow
from os import path


def process_file(fn):
    """
    Read a file generated by urqmd-observables and calculate batch quantities.
    fn : filename
        Must be gzipped and contain a line
            Nch_mid Nch_flow Q2re Q2im Q3re ...
        for each event.
    returns : [<Nch_flow>, v_2{2}, v_3{2}]
    """
    with subprocess.Popen(('zcat', fn), stdout=subprocess.PIPE) as proc:
        obs = np.array([l.split() for l in proc.stdout], dtype=np.float64)

    Nch_flow = obs[:, 1]
    mult = [Nch_flow.mean()]

    q2, q3 = obs.view(complex)[:, 1:3].T
    vnk = flow.Cumulant(Nch_flow, q2, q3)
    cumulants = np.array([vnk.flow(n, 2, error=True) for n in (2, 3)])
    
    return cumulants


def main():
    filenames = sys.argv[1:]
    for f in filenames:
        eos = path.basename(path.splitext(f)[0])
        with \
            open('results/' + eos + '.v2.dat', 'w') as v2file, \
            open('results/' + eos + '.v3.dat', 'w') as v3file:
            
            v2, v3 = process_file(f)
            print(v2[0], v2[1], file=v2file)
            print(v3[0], v3[1], file=v3file)


if __name__ == "__main__":
    main()
